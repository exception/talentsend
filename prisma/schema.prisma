// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?

  joinedAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]

  organizations OrgMember[]
  Offer         Offer[]
}

enum TeamPlan {
  FREE
  PREMIUM
  ENTERPRISE
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  imageUrl               String?
  about                  Json?
  brand                  Json?
  equity                 Json?
  stripeCustomerId       String?  @unique
  plan                   TeamPlan @default(FREE)
  offerCuota             Int      @default(0)
  billingCycleStart      Int?
  yearlyPlan             Boolean?
  billingCycleMonthStart Int?

  members         OrgMember[]
  offers          Offer[]
  invites         MemberInvite[]
  benefitPackages BenefitPackage[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  installedApps InstalledApp[]

  @@index([stripeCustomerId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model OrgMember {
  id Int @id @default(autoincrement())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  organizationId String
  userId         String

  @@index([organizationId])
  @@index([userId])
}

enum OfferStatus {
  PENDING // pending payment
  DRAFT // payment approved, not published
  PUBLISHED
  EXPIRED
  ACCEPTED
  CANCELLED
}

model Offer {
  id String @id @default(cuid())

  targetFirstName String      @default("")
  targetLastName  String      @default("")
  targetEmail     String
  status          OfferStatus @default(PENDING)
  published       Boolean     @default(false)
  publishedAt     DateTime?

  createdAt DateTime @default(now())
  body      Json

  expiresAt                DateTime?
  canSkipEmailConfirmation Boolean   @default(false)

  createdBy      User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  benefitPackage BenefitPackage? @relation(fields: [benefitPackageId], references: [id], onDelete: SetNull)

  organizationId   String
  userId           String?
  benefitPackageId String?

  @@index([organizationId])
  @@index([userId])
  @@index([benefitPackageId])
}

model MemberInvite {
  id String @id @default(cuid())

  target       String // email
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  organizationId String

  @@index([organizationId])
  @@index([target])
}

model BenefitPackage {
  id String @id @default(cuid())

  name     String
  benefits Json

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  offers Offer[]

  @@index([organizationId])
}

model InstalledApp {
  id Int @id @default(autoincrement())

  appId   String
  appData Json

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  installedAt DateTime @default(now())

  @@unique([appId, organizationId])
  @@index([organizationId])
  @@index([appId])
}
